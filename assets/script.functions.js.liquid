function getVariantID(variantName) {
  const selectedVariantID = document.querySelector(
    `[name="${variantName}"]:checked`
  );
  if (selectedVariantID) return +selectedVariantID.value;
  return null;
}

function selectDefaultVariant(button) {
  let { variantName, variantID } = button.dataset;
  if (variantID || !variantName) return;
  const availableVariant = document.querySelector(
    `[name="${variantName}"]:not([disabled])`
  );
  if (!availableVariant) return;
  availableVariant.click();
}

async function onAddToCartButtonClicked(button) {
  let { variantName, qty, variantId } = button.dataset;
  qty = +qty;
  if (!variantId && variantName) variantId = getVariantID(variantName);
  if (variantId && isNaN(variantId)) {
    variantId = +variantId;
  }
  try {
    button.dataset.isProcessing = true;
    delete button.dataset.hasFailed;
    delete button.dataset.hasSucceed;
    await AgainFasterAPI.addToCart(variantId, qty);
    button.dataset.hasSucceed = true;
  } catch (ex) {
    button.dataset.hasFailed = true;
    console.error(ex);
  } finally {
    delete button.dataset.isProcessing;
  }
}

function onProductVariantChange(inputRadio) {
  const { optionsSelector } = inputRadio.dataset;
  const selectInput = document.querySelector(optionsSelector);
  selectInput.value = inputRadio.value;
}

function updateFormState(form) {
  const hasErrors = form.querySelectorAll(".o-input--has-error").length > 0;
  if (hasErrors) {
    form.classList.add("o-form--has-errors");
  } else {
    form.classList.remove("o-form--has-errors");
  }
}

function updateCountryProvinceOptions(
  selectedCountry,
  countrySelector,
  provinceSelector
) {
  const countryProvinces = JSON.parse(
    countrySelector.querySelector(`[value="${selectedCountry}"]`).dataset
      .provinces
  );
  const currentProvinces = provinceSelector.querySelectorAll(
    "option:not(:nth-child(1))"
  );
  currentProvinces.forEach((province) =>
    province.parentNode.removeChild(province)
  );
  countryProvinces.forEach(([value, text]) => {
    const option = document.createElement("option");
    option.value = value;
    option.innerText = text;
    provinceSelector.append(option);
  });
  countrySelector.dataset.oldValue = selectedCountry;
}

function updateInputState(form, input, value, tag, type, isRequired) {
  let errorsCount = 0;

  if (value) {
    input.classList.add("o-input--has-value");
  } else {
    input.classList.remove("o-input--has-value");
  }

  if (isRequired && !value) errorsCount++;

  switch (tag) {
    case "SELECT": {
      const { isCountry, provinceSelector, oldValue } = input.dataset;
      if (value === "---" && isRequired) {
        errorsCount++;
      }
      if (
        value &&
        isCountry === "true" &&
        provinceSelector &&
        oldValue !== value
      ) {
        updateCountryProvinceOptions(
          value,
          input.closest("select"),
          document.querySelector(provinceSelector)
        );
      }
      break;
    }
  }

  switch (type) {
    case "password": {
      const { passwordGroup } = input.dataset;
      const relatedPasswordInputs = document.querySelectorAll(
        `[data-password-group="${passwordGroup}"]`
      );
      let passwordsMatch = true;
      relatedPasswordInputs.forEach((pwdInput) => {
        if (pwdInput.value !== value) passwordsMatch = false;
      });
      if (!passwordsMatch) errorsCount++;
      break;
    }
  }

  if (errorsCount > 0) {
    input.classList.add("o-input--has-error");
  } else {
    input.classList.remove("o-input--has-error");
  }
}

function getFormInputs(form) {
  return form.querySelectorAll("input, select, textarea");
}

function updateInputsState(form, inputs = []) {
  if (inputs.length === 0) {
    inputs = getFormInputs(form);
  }
  inputs.forEach((input) => {
    const value = input.value;
    const tag = input.tagName;
    const type = input.getAttribute("type");
    const isRequired = input.hasAttribute("required");
    updateInputState(form, input, value, tag, type, isRequired);
  });
  updateFormState(form);
}

function onInputChange(form, input, allInputs) {
  input.classList.add("o-input--touched");
  updateInputsState(form, allInputs);
}

function watchFormState(form) {
  const inputs = getFormInputs(form);
  inputs.forEach((input) => {
    input.addEventListener("change", ({ target }) =>
      onInputChange(form, target, inputs)
    );
    input.addEventListener("input", ({ target }) =>
      onInputChange(form, target, inputs)
    );
  });
  updateInputsState(form);
}

function updateCart(newData) {
  window.dispatchEvent(
    new CustomEvent(AF_EVENT.CART_UPDATE, { detail: newData })
  );
}

function hideCart() {
  window.dispatchEvent(new CustomEvent(AF_EVENT.CART_HIDE));
}

function showCart() {
  window.dispatchEvent(new CustomEvent(AF_EVENT.CART_SHOW));
}

function toggleCart() {
  window.dispatchEvent(new CustomEvent(AF_EVENT.CART_TOGGLE));
}

async function editAddress(id = null) {
  try {
    const addressTemplate = await fetch(TEMPLATE_URL.ADDRESS);
    const addressTemplateHTML = await addressTemplate.text();
    let data = {};
    if (id) {
      const addressData = await AgainFasterAPI.getAddress(
        meta.page.customerId,
        id
      );
      console.log({ addressData });
      data = {
        id,
        ...addressData,
      };
    }
    new Address(addressTemplateHTML, data, ".c-modal__content-box");
  } catch (ex) {
    console.error(ex);
  }
}

function onCloseAddressModal() {
  window.dispatchEvent(new CustomEvent(AF_EVENT.ADDRESS_MODAL_CLOSE));
}

function onSaveAddressModal(event) {
  event.preventDefault();
  const button = event.target.closest("button");
  window.dispatchEvent(
    new CustomEvent(AF_EVENT.ADDRESS_MODAL_SAVE, { detail: button })
  );
}

function getFormData(form) {
  const formData = new FormData(form);
  const data = {};
  for (const [key, value] of formData.entries()) {
    if (!value) continue;
    data[key] = value;
  }
  return data;
}

function onDangerFormSubmit(form) {
  const confirmMessage = form.dataset.confirmMessage;
  if (confirm(confirmMessage)) {
    form.submit();
  }
}
