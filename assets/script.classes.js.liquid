class DragSlider {
  sliderElement;
  isDown = false;
  startX;
  scrollLeft;

  constructor(element) {
    this.sliderElement = element;
    this.applyListeners();
  }

  _activateDrag() {
    this.isDown = true;
    setTimeout(() => {
      this.sliderElement.classList.add("is-active");
    }, 200);
  }

  _deactivateDrag() {
    this.isDown = false;
    setTimeout(() => {
      this.sliderElement.classList.remove("is-active");
    }, 200);
  }

  applyListeners() {
    this.sliderElement.addEventListener("mousedown", (e) => {
      this._activateDrag();
      this.startX = e.pageX - this.sliderElement.offsetLeft;
      this.scrollLeft = this.sliderElement.scrollLeft;
    });

    this.sliderElement.addEventListener("mouseleave", () => {
      this._deactivateDrag();
    });

    this.sliderElement.addEventListener("mouseup", () => {
      this._deactivateDrag();
    });

    this.sliderElement.addEventListener("mousemove", (e) => {
      if (!this.isDown) return;
      e.preventDefault();
      const x = e.pageX - this.sliderElement.offsetLeft;
      const walk = (x - this.startX) * 3;
      this.sliderElement.scrollLeft = this.scrollLeft - walk;
    });
  }
}

class AgainFasterAPI {
  static async addToCart(variantID, qty) {
    const data = {
      items: [
        {
          id: variantID,
          quantity: qty,
        },
      ],
    };
    const response = await fetch("/cart/add.js", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });
    if (!response.ok) throw new Error("Something went wrong");
    const responseJSON = await response.json();

    return responseJSON;
  }

  static async getRecommendedProducts(productID) {
    const response = await fetch(
      `/recommendations/products.json?product_id=${productID}`
    );
    if (!response.ok) throw new Error("Something went wrong");
    const responseJSON = await response.json();
    return responseJSON.products;
  }
}
